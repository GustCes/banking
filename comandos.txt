activar venv
source venv/Scripts/activate

git stash guarda cambios temporales
---------------comandos de python------------------
py manage.py

py manage.py runserver
a veces se le agrega el 8080 en caso de que el puerto usual este ocupado

py manage.py showmigrations
    -la primera mingracion sera 0001_initial, los demas seran como un comentario explicando cada operacion con 0002, 0003 etc
py manage.py makemigrations
    -crea una migracion manualmente (es como un comentario de los cambios hechos)

ver migraciones de algo en especifico: auth, sessions, admin, etc con cualquiera
py manage.py showmigrations authma

python manage.py startapp (nombre del modulo o APP) //para crear 


            python manage.py shell
-interactua con la base de datos desde python
GET DATA: User.objects.all() -> select * from users;

INSERT DATA: User(firstname="nombre",lastname="apellido generico" etc)

ciclo de vida para la base de datos
1. create banking database in postgreSQL (cmd)

2. connetc to banking DB with settings file
    user: posrtgres
    port: 5432
    host: localhost
    dbname: banking
  3.2 test connection database

3. create new models
    -entity-relation model

4. make migrations

5.migrate to database


crear objetos con python manage.py shell
    python manage.py shell
    (se sale de este menu con exit)
    
    llamar modelos ->
    from authentication.models import User (o cualquier clase/modelo ahi)

    preparar datos para guardar ->
    data=User(first_name="Sarah", last_name="Connor")

    guardar
    data.save()

    imprimir
    User.objects.all()

migraciones para clases
    1. python manage.py showmigrations authentication
    1.5 crear las tablas
    2. python manage.py makemigrations
    3. python manage.py migrate

    4.añadir datos con shell
    python manage.py shell
    from authentication.models import Department
    data = Department(name="Nariño", abrev="NAR")
    data.save()
    Department.objects.all()

python manage.py migrate nombreapp num_migracion zero